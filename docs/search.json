[
  {
    "objectID": "01-basico.html",
    "href": "01-basico.html",
    "title": "",
    "section": "",
    "text": "C√≥digo"
  },
  {
    "objectID": "01-basico.html#sec-julia",
    "href": "01-basico.html#sec-julia",
    "title": "",
    "section": "El lenguaje de programaci√≥n Julia",
    "text": "El lenguaje de programaci√≥n Julia\nEl c√≥digo se organiza en scripts, m√≥dulos y paquetes. Cada uno de estos define tipos y funciones que interactuan para componer las soluciones deseadas.\nEl resto de esta unidad esta dedicada a precisar la sintaxis del lenguaje y anotaciones de importancia sobre su funcionamiento."
  },
  {
    "objectID": "01-basico.html#instalaci√≥n",
    "href": "01-basico.html#instalaci√≥n",
    "title": "",
    "section": "Instalaci√≥n",
    "text": "Instalaci√≥n\nEl sitio oficial recomienda el uso de juliaup, una herramienta que permite manejar diferentes versiones de Julia y mantenerlas actualizarlas.\nhttps://julialang.org/install/\nLas versiones de Julia siguen el paradigma de semantic versioning (semver), por lo que juliaup permite gestionarlas de manera simple y efectiva. La versi√≥n estable es la 1.10 y las m√°s nuevas son la 1.11 y la 1.12.\nTambi√©n es posible usar Colab de Google con el kernel para Julia; este usar julia 1.11 y hasta el momento, es el √∫nico disponible."
  },
  {
    "objectID": "01-basico.html#manos-a-la-obra",
    "href": "01-basico.html#manos-a-la-obra",
    "title": "",
    "section": "Manos a la obra",
    "text": "Manos a la obra\nUna vez instalado, se puede ejecutar un REPL de Julia en la terminal ejecutando\n```{bash}\n$ julia\n```\ndado que instalamos con juliaup podemos mantener diferentes versiones, e.g.,\n```{bash}\n$ juliaup list\n```\nque nos mostrar√° una larga lista de posibles channels o versiones de instalaci√≥n\n```{bash}\n\n$ juliaup add 1.10\n$ juliaup default 1.10\n```\nestas instrucciones a√±adir√°n la versi√≥n 1.10 y la establecer√° como versi√≥n o canal por omisi√≥n. Puedes llamar diferentes versiones ejecutando julia +channel como sigue:\n```{bash}\n$ julia +1.12\n\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.12.1 (2025-10-17)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org release\n|__/                   |\n\njulia&gt;\n\n```\n\nCreando un ‚ÄúHola mundo‚Äù\nUno de los programas m√°s comunes es el siguiente\n\nprintln(\"¬°Hola üåé!\")\n\n¬°Hola üåé!\n\n\n\n\nUsando Colab\nEs posible usar Colab para reducir la complejidad de la instalaci√≥n, ya que cuenta con un kernel de Julia. Como se mencionaba anteriormente, solo se soporta la versi√≥n 1.11 que es suboptima con las versiones de paquetes que usaremos m√°s adelante. Adicionalmente, se tiene limitante de los recursos limitados que se nos proporcionen, en particular al momento de escribir estas notas, aunque los recursos que se otorgan suelen ser suficientes para pruebas, no lo son en otros √°mbitos: solo se tienen 2 vcpus y tiempos de ejecuci√≥n limitados.\n\n\nUsando Jupyter\nUna vez instalado julia; debemos instalar el paquete IJulia que instalar√° todo lo necesario para correr Jupyter (ver la secci√≥n de Pkg al final de esta unidad para m√°s informaci√≥n sobre paquetes). Una vez corriendo, se debe seleccionar crear un notebook espec√≠ficando el kernel de Julia para utilizarlo.\n\n\nFunciones\nLas funciones son centrales en Julia. Por ahora veremos la estructura y m√°s adelante, definiremos algunas.\nPara ejecutar una funci√≥n se utiliza la sintaxis fun(arg), esta regresar√° un valor, que depende de la funci√≥n misma y muchas veces del tipo que tenga arg. Si fueran dos argumentos fun(arg1, arg2), etc. Tambi√©n se soportan argumentos con nombre fun(arg1, arg2, ...; kwarg=val) (kwargs para nombrarlos de manera sint√©tica). En este caso, los kwargs no influyen en los tipos de salida. Esto puede parecer extra√±o pero es debido a las decisiones de implementaci√≥n relacionadas con el desempe√±o.\nLas funciones se definen como sigue:\n1function fun(arg1, arg2...)\n    # ... expresiones ...\nend\n\n2function fun(arg1, arg2...; kwarg1=valor1, kwargs2...)\n    # ... expresiones ...\nend\n\n3fun(arg1, arg2...; kwarg1=valor1, kwargs2...) = expresion\n\n4(arg1, arg2...; kwarg1=valor1, kwargs2...) -&gt; expresion\n\n5fun() do x\n    x^2 # ... expresiones ...\nend\n\n1\n\nDefinici√≥n de una funci√≥n simple, los tipos de los argumentos se utilizan para generar m√∫ltiples versiones de una funci√≥n.\n\n2\n\nTambi√©n se soportan argumentos nombrados, los cuales van despu√©s de ;, se debe tener en cuenta que los tipos de los argumentos nombrados no son utilizados para determinar si una funci√≥n debe compilarse. Los argumentos nombrados pueden o no tener valores por omisi√≥n.\n\n3\n\nSi la funci√≥n tiene una estructura simple, de una expresi√≥n, es posible ignorar function y end, usando ‚Äò=‚Äô para definirla.\n\n4\n\nMuchas veces es √∫til definir funciones an√≥nimas, que suelen pasarse a otras funciones de orden superior.\n\n5\n\nUn embellecedor √∫til para generar una funci√≥n an√≥nima (definida entre do...end) que se pasa como primer argumento a fun, e.g., es equivalente a fun(x-&gt;x^2).\n\n\nEl √°mbito o scope de las variables en Julia es sint√°ctico, que significa que se hereda del c√≥digo donde las funciones fueron definidas, y no din√°mico (que se hereda desde d√≥nde se ejecuta la funci√≥n). Aunque es el comportamiento de la mayor√≠a de los lenguajes modernos, es importante conocerlo sobre todo para la creaci√≥n de cerraduras sint√°cticas en funciones.\n\n\nExpresiones y operadores\nLas expresiones son la forma m√°s gen√©rica de expresar el c√≥digo en Julia, comprenden operaciones aritm√©ticas, asignaci√≥n y declaraci√≥n de variables, definiciones de bloques de c√≥digo, llamadas de funciones, entre otras.\nCada linea suele ser una expresi√≥n, a menos que se extienda por m√∫ltiples lineas por medio de un agrupador de c√≥digo o datos, estos pueden ser\nbegin\n    ...\nend\n\nlet\n    ...\nend\n\n(...)\n\n[...]\n\n[...]\n\nfor elem in collection\n    ...\nend\n\nwhile cond_expr\n    ...\nend\n\nif cond_expr\n    ...\nend\n\nfunction fun(args...; kwargs...)\n    ...\nend\n\ntry\n    ...\ncatch\n    ...\nfinally\n    ...\nend\nentre las m√°s utilizadas; claramentre hay infinidad de formas de componerlas para formar los algoritmos que se esten escribiendo.\n\nDefinici√≥n de variables\nLas definiciones de variables tienen la sintaxis variable = valor; las variables comunmente comienzan con una letra o _, las letras pueden ser caracteres unicode, no deben contener espacios ni puntuaciones como parte del nombre; valor es el resultado de evaluar o ejecutar una expresi√≥n.\nLos operadores m√°s comunes son los aritm√©ticos +, -, *, /, √∑, %, \\, ^, con precedencia y significado t√≠pico. Existen maneras compuestas de modificar una variable anteponiendo el operador aritm√©tico al simbolo de asignaci√≥n, e.g., variable += valor, que se expande a variable = variable + valor. Esto implica que variable debe estar previamente definida previo a la ejecuci√≥n.\nLos operadores l√≥gicos tambi√©n tienen el significado esperado.\n\n\n\noperaci√≥n\ndescripci√≥n\n\n\n\n\na && b\nAND l√≥gico\n\n\na || b\nOR l√≥gico\n\n\na ‚äª b\nXOR l√≥gico\n\n\n!a\nnegaci√≥n l√≥gica\n\n\na &lt; b\ncomparaci√≥n a es menor que b\n\n\na &gt; b\ncomparaci√≥n a es mayor que b\n\n\na &lt;= b\ncomparaci√≥n a es menor o igual que b\n\n\na &gt;= b\ncomparaci√≥n a es mayor o igual que b\n\n\na == b\ncomparaci√≥n de igualdad\n\n\na === b\ncomparaci√≥n de igualdad (a nivel de tipo)\n\n\na != b\ncomparaci√≥n de desigualdad\n\n\na !== b\ncomparaci√≥n de desigualdad (a nivel de tipo)\n\n\n\nEn particular && y || implementan corto circuito de c√≥digo, por lo que pueden usarse para el control de que operaciones se ejecutan. Cuando se compara a nivel de tipo 0 (entero) ser√° diferente de 0.0 (real).\nTambi√©n hay operadores l√≥gicos a nivel de bit, los argumentos son enteros.\n\n\n\noperaci√≥n\ndescripci√≥n\n\n\n\n\na & b\nAND a nivel de bits\n\n\na | b\nOR a nivel de bits\n\n\na ‚äª b\nXOR a nivel del bits\n\n\n~a\nnegaci√≥n l√≥gica a nivel de bits\n\n\n\n\n\nLiterales\nLos valores literales son valores explicitos que Julia permite para algunos tipos de datos, y que permiten definirlos de manera simple; permitiendonos escribir datos directamente en el c√≥digo.\nLos n√∫meros enteros se definen sin punto decimal, es posible usar _ como separador y dar m√°s claridad al c√≥digo. Los enteros pueden tener 8, 16, 32, o 64 bits; por omisi√≥n, se empaquetan en variables del tipo Int (Int64). Los valores hexadecimales se interpretan como enteros sin signo, y adem√°s se empaquetan al n√∫mero de bits necesario minimo para contener. El comportamiento para valores en base 10 es el de hexadecimal es congruente con un lenguaje para programaci√≥n de sistemas.\n\na = 100\nprintln((a, sizeof(a)))\nb = Int8(100)\nprintln((b, sizeof(b)))\nc = 30_000_000\nprintln((c, sizeof(c)))\nd = 0xffff\nprintln((d, sizeof(d)))\n\n(100, 8)\n(100, 1)\n(30000000, 8)\n(0xffff, 2)\n\n\n\n\nExisten n√∫meros enteros de precisi√≥n 128 pero las operaciones al d√≠a de hoy no son implementadas de manera nativa por los procesadores; as√≠ mismo se reconocen n√∫meros de punto flotante de precisi√≥n media Float16 pero la mayor√≠a de los procesadores no tienen soporte nativo para realizar operaciones con ellos, aunque los procesadores de √∫ltima generaci√≥n si lo tienen.\nSi la precisi√≥n esta en duda o el contexto lo am√©rita, deber√° especificarlo usando el constructor del tipo e.g., Int8(100), UInt8(100), Int16(100), UInt16(100), Int32(100), UInt32(100), Int64(100), UInt64(100).\nLos n√∫meros de punto flotante tienen diferentes formas de definirse, teniendo diferentes efectos. Para n√∫meros de precision simple, 32 bits, se definen con el sufijo f0 como 3f0. El sufijo e0 tambi√©n se puede usar para definir precisi√≥n doble (64 bit). El cero del sufijo en realidad tiene el objetivo de colocar el punto decimal, en notaci√≥n de ingenier√≠a, e.g., \\(0.003\\) se define como \\(3f-3\\) o \\(3e-3\\), dependiendo del tipo de dato que se necesite. Si se omite sufijo y se pone solo punto decimal entonces se interpretar√° como precision doble. Los tipos son Float32 y Float64.\nLos datos booleanos se indican mediante true y false para verdadero y falso, respectivamente.\nLos caracteres son s√≠mbolos para √≠ndicar cadenas, se suelen representar como enteros peque√±os en memoria. Se especifican con comillas simples 'a', 'z', '!' y soporta simbolos unicode 'ü§†'.\nLas cadenas de caracteres son la manera de representar textos como datos, se guardan en zonas contiguas de memoria. Se especifican con comillas dobles y tambi√©n soportan s√≠mbolos unicode, e.g., \"hola mundo\", \"pato es un üê∑\".\n\n\nJulia guarda los s√≠mbolos de manera especial y pueden ser utilizados para realizar identificaci√≥n de datos eficiente, sin embargo, no es buena idea saturar el sistema de manejo de s√≠mbolos por ejemplo para crear un vocabulario ya que no liberar√° la memoria despu√©s de definirlos ya que es un mec√°nismo dise√±ado para la representaci√≥n de los programas, pero lo suficientemente robusto y bien definido para usarse en el dise√±o e implementaci√≥n de programas de los usuarios.\nEn Julia existe la noci√≥n de s√≠mbolo, que es una cadena que adem√°s solo existe en una posici√≥n en memoria se usa el prefijo : para denotarlos.\n\nprintln(:hola === :hola)\nprintln(typeof(:hola))\nprintln(Symbol(\"hola mundo\"))\n\ntrue\nSymbol\nhola mundo\n\n\n\n\n\nControl de flujo\nEl control de flujo nos permite escoger que partes del c√≥digo se ejecutaran como consecuencia de la evaluaci√≥n de una expresi√≥n, esto incluye repeticiones.\nLas condicionales son el control de flujo m√°s simple.\n\na = 10\n1if a % 2 == 0\n2    \"par\"\nelse\n3    \"impar\"\nend\n\n\n1\n\nExpresi√≥n condicional.\n\n2\n\nExpresi√≥n a ejecutarse si (1) es verdadero.\n\n3\n\nExpresi√≥n a evaluarse si (1) es falso.\n\n\n\n\n\"par\"\n\n\nSe puede ignorar la clausula else dando solo la opci√≥n de evaluar (2) si (1) es verdadero. Finalmente, note que la condicional es una expresi√≥n y devuelve un valor.\n\na = 10\nif log10(a) == 1\n    \"es 10\"\nend\n\n\"es 10\"\n\n\nTambi√©n pueden concatenarse m√∫ltiples expresiones condicionales con elseif como se muestra a continuaci√≥n.\n\na = 9\nif a % 2 == 0\n    println(\"divisible entre 2\")\nelseif a % 3 == 0\n    println(\"divisible entre 3\")\nelse\n    println(\"no divisible entre 2 y 3\")\nend\n\ndivisible entre 3\n\n\nEs com√∫n utilizar la sintaxis en Julia (short circuit) para control de flujo:\n\na = 9\n\n1println(a % 2 == 0 && \"es divisible entre dos\")\n2println(a % 3 == 0 && \"es divisible entre tres\")\n\n\n1\n\nEl resultado de la condici√≥n es falso, por lo que no se ejecutar√° la siguiente expresi√≥n.\n\n2\n\nEl resultado es verdadero, por lo que se ejecutar√° la segunda expresi√≥n.\n\n\n\n\nfalse\nes divisible entre tres\n\n\nFnalmente, existe una condicional de tres vias expresion ? expr-verdadero : expr-falso\n\na = 9\n\nprintln(a % 2 == 0 ? \"es divisible entre dos\" : \"no es divisible entre dos\")\nprintln(a % 3 == 0 ? \"es divisible entre tres\" : \"no es divisible entre tres\")\n\nno es divisible entre dos\nes divisible entre tres\n\n\n\nCiclos\nLos ciclos son expresiones de control de flujo que nos permiten iterar sobre una colecci√≥n o repetir un c√≥digo hasta que se cumpla alguna condici√≥n. En Julia existen dos expresiones de ciclos:\n\nfor x in colecci√≥n ...expresiones... end y\nwhile condici√≥n ...expresioens... end\n\nEn el caso de for, la idea es iterar sobre una colecci√≥n, esta colecci√≥n puede ser un rango, i.e., inicio:fin, inicio:paso:fin, o una colecci√≥n como las tuplas, los arreglos, o cualquiera que cumpla con la interfaz de colecci√≥n iterable del lenguaje.\n\nfor i in 1:5\n    println(\"1er ciclo: \", i =&gt; i^2)\nend\n\nfor i in [10, 20, 30, 40, 50]\n    println(\"2do ciclo: \", i =&gt; i/10)\nend\n\n1er ciclo: 1 =&gt; 1\n1er ciclo: 2 =&gt; 4\n1er ciclo: 3 =&gt; 9\n1er ciclo: 4 =&gt; 16\n1er ciclo: 5 =&gt; 25\n2do ciclo: 10 =&gt; 1.0\n2do ciclo: 20 =&gt; 2.0\n2do ciclo: 30 =&gt; 3.0\n2do ciclo: 40 =&gt; 4.0\n2do ciclo: 50 =&gt; 5.0\n\n\nAl igual que en otros lenguajes modernos, se define la variante completa o comprehensive for que se utiliza para transformar la colecci√≥n de entrada en otra colecci√≥n cuya sintaxis se ejemplifica a continuaci√≥n:\n\na = [i =&gt; i^2 for i in 1:5]\nprintln(a)\n\n[1 =&gt; 1, 2 =&gt; 4, 3 =&gt; 9, 4 =&gt; 16, 5 =&gt; 25]\n\n\nTambi√©n es posible definir un generador, esto es, un c√≥digo que puede generar los datos, pero que no los generar√° hasta que se les solicite.\n\na = (i =&gt; i^2 for i in 1:5)\nprintln(a)\nprintln(collect(a))\n\nBase.Generator{UnitRange{Int64}, var\"#3#4\"}(var\"#3#4\"(), 1:5)\n[1 =&gt; 1, 2 =&gt; 4, 3 =&gt; 9, 4 =&gt; 16, 5 =&gt; 25]\n\n\nOtra forma de hacer ciclos de intrucciones es repetir mientras se cumpla una condici√≥n:\n\ni = 0\nwhile i &lt; 5\n    i += 1\n    println(i)\nend\n\ni\n\n1\n2\n3\n4\n5\n\n\n5\n\n\n\n\n\nTuplas y arreglos en Julia\nUna tupla es un conjunto ordenado de datos que no se puede modificar y que se desea esten contiguos en memoria, la sintaxis en memoria es como sigue:\n\n1a = (2, 3, 5, 7)\nb = (10, 20.0, 30f0)\nc = 100 =&gt; 200\n2println(typeof(a))\nprintln(typeof(b))\nprintln(typeof(c))\n3a[1], a[end], b[3], c.first, c.second\n\n\n1\n\nDefine las tuplas.\n\n2\n\nImprime los tipos de las tuplas.\n\n3\n\nMuestra como se accede a los elementos de las tuplas. Julia indexa comenzando desde 1, y el t√©rmino end tambi√©n se utiliza para indicar el √∫ltimo elemento en una colecci√≥n ordenada.\n\n\n\n\nNTuple{4, Int64}\nTuple{Int64, Float64, Float32}\nPair{Int64, Int64}\n\n\n(2, 7, 30.0f0, 100, 200)\n\n\nLa misma sintaxis puede generar diferentes tipos de tuplas. En el caso NTuple{4, Int4} nos indica que el tipo maneja cuatro elementos de enteros de 64 bits, los argumentos entre {} son parametros que especifican los tipos en cuesti√≥n. En el caso de Tuple se pueden tener diferentes tipos de elementos. La tupla Pair es especial ya que solo puede contener dos elementos y es b√°sicamente para embellecer o simplificar las expresiones; incluso se crea con la sintaxis key =&gt; value y sus elementos pueden accederse mediante dos campos nombrados.\nLos arreglos son datos del mismo tipo contiguos en memoria, a diferencia de las tuplas, los elementos se pueden modificar, incluso pueden crecer o reducirse. Esto puede implicar que se alojan en zonas de memoria diferente (las tuplas se colocan en el stack y los arreglos en el heap, ver la siguiente unidad para m√°s informaci√≥n). Desde un alto nivel, los arreglos en Julia suelen estar asociados con vectores, matrices y tensores, y un arsenal de funciones relacionadas se encuentran definidas en el paquete LinearAlgebra, lo cual esta m√°s all√° del alcance de este curso.\n\n1a = [2, 3, 5, 7]\nb = [10, 20.0, 30f0]\n2println(typeof(a))\nprintln(typeof(b))\n3a[1], a[end], b[3], b[2:3]\n\n\n1\n\nDefine los arreglos a y b.\n\n2\n\nMuestra los tipos de los arreglos, note como los tipos se promueven al tipo m√°s g√©nerico que contiene la definici√≥n de los datos.\n\n3\n\nEl acceso es muy similar a las tuplas para arreglos unidimensionales, note que es posible acceder rangos de elementos con la sintaxis ini:fin.\n\n\n\n\nVector{Int64}\nVector{Float64}\n\n\n(2, 7, 30.0, [20.0, 30.0])\n\n\n\na = [2 3;\n1     5 7]\n2display(a)\n3display(a[:, 1])\n4display(a[1, :])\n\n\n1\n\nDefinici√≥n de un arreglo bidimensional, note como se ignora la coma , en favor de la escritura por filas separadas por ;.\n\n2\n\nLa variable a es una matriz de 2x2.\n\n3\n\nEs posible acceder una columna completa usando el s√≠mbolo : para indicar todos los elementos.\n\n4\n\nDe igual forma, es posible acceder una fila completa.\n\n\n\n\n2√ó2 Matrix{Int64}:\n 2  3\n 5  7\n\n\n2-element Vector{Int64}:\n 2\n 5\n\n\n2-element Vector{Int64}:\n 2\n 3\n\n\n\n\nDiccionarios y conjuntos en Julia\nUn diccionario es un arreglo asociativo, i.e., guarda pares llave-valor. Permite acceder de manera eficiciente al valor por medio de la llave, as√≠ como tambi√©n verificar si hay una entrada dentro del diccionario con una llave dada. La sintaxis es como sigue:\n\n1a = Dict(:a =&gt; 1, :b =&gt; 2, :c =&gt; 3)\n2a[:b] = 20\nprintln(a)\n3a[:d] = 4\nprintln(a)\n4delete!(a, :a)\na\n\n\n1\n\nDefinici√≥n del diccionario a que mapea simbolos a enteros.\n\n2\n\nCambia el valor de :b por 20.\n\n3\n\nA√±ade :d =&gt; 4 al diccionario a.\n\n4\n\nBorra el par con llave :a.\n\n\n\n\nDict(:a =&gt; 1, :b =&gt; 20, :c =&gt; 3)\nDict(:a =&gt; 1, :b =&gt; 20, :d =&gt; 4, :c =&gt; 3)\n\n\nDict{Symbol, Int64} with 3 entries:\n  :b =&gt; 20\n  :d =&gt; 4\n  :c =&gt; 3\n\n\nEs posible utilizar diferentes tipos siempre y cuando el tipo en cuesti√≥n defina de manera correcta la funci√≥n hash sobre la llave y la verificaci√≥n de igualdad ==.\nUn conjunto se representa con el tipo Set, se implementa de manera muy similar al diccionario pero solo necesita el elemento (e.g., la llave). Como conjunto implementa las operaciones clasificaci√≥n de operaciones de conjuntos\n\n1a = Set([10, 20, 30, 40])\n2println(20 in a)\n3push!(a, 50)\nprintln(a)\n4delete!(a, 10)\nprintln(a)\n5println(intersect(a, [20, 35]))\n6union!(a, [100, 200])\nprintln(a)\n\n\n1\n\nDefinici√≥n del conjunto de n√∫meros enteros.\n\n2\n\nVerificaci√≥n de membresia al conjunto a.\n\n3\n\nA√±ade 50 al conjunto.\n\n4\n\nSe borra el elemento 10 del conjunto.\n\n5\n\nIntersecci√≥n de a con una colecci√≥n, no se modifica el conjunto a.\n\n6\n\nUni√≥n con otra colecci√≥n, se modifica a.\n\n\n\n\ntrue\nSet([50, 20, 10, 30, 40])\nSet([50, 20, 30, 40])\nSet([20])\nSet([50, 200, 20, 30, 40, 100])"
  },
  {
    "objectID": "01-basico.html#el-flujo-de-compilaci√≥n-de-julia",
    "href": "01-basico.html#el-flujo-de-compilaci√≥n-de-julia",
    "title": "",
    "section": "El flujo de compilaci√≥n de Julia",
    "text": "El flujo de compilaci√≥n de Julia\nBasta con escribir una linea de c√≥digo en el REPL de Julia y esta se compilar√° y ejecutar√° en el contexto actual, usando el √°mbito de variables. Esto es conveniente para comenzar a trabajar, sin embargo, es importante conocer el flujo de compilaci√≥n para tenerlo en cuenta mientras se c√≥difica, y as√≠ generar c√≥digo eficiente. En particular, la creaci√≥n de funciones y evitar la inestabilidad de los tipos de las variables es un paso hacia la generaci√≥n de c√≥digo eficiente. Tambi√©n es importante evitar el alojamiento de memoria din√°mica siempre que sea posible. A continuaci√≥n se mostrar√° el an√°lisis de un c√≥digo simple a diferentes niveles, mostrando que el lenguaje nos permite observar la generaci√≥n de c√≥digo, que √∫ltimadamente nos da cierto control y nos permite verificar que lo que se esta implementando es lo que se espec√≠fica en el c√≥digo. Esto no es posible en lenguajes como Python.\n\nlet\n    e = 1.1\n    println(e*e)\n    @code_typed e*e\nend\n\n1.2100000000000002\n\n\n\nCodeInfo(\n1 ‚îÄ %1 = Base.mul_float(x, y)::Float64\n‚îî‚îÄ‚îÄ      return %1\n) =&gt; Float64\n\n\n\nEn este c√≥digo, se utiliza la estructa de agrupaci√≥n de expresiones let...end. Cada expresi√≥n puede estar compuesta de otras expresiones, y casi todo es una expresi√≥n en Julia. La mayoria de las expresiones ser√°n finalizadas por un salto de linea, pero las compuestas como let, begin, function, if, while, for, do, module estar√°n finalizadas con end. La indentaci√≥n no importa la indentaci√≥n como en Python, pero es aconsejable para mantener la legibilidad del c√≥digo. La linea 2 define e inicializa la variable e; la linea 3 llama a la funci√≥n println, que imprimir√° el resultado de e*e en la consola. La funci√≥n println esta dentro de la biblioteca est√°ndar de Julia y siempre esta visible. La linea 4 es un tanto diferente, es una macro que toma la expresi√≥n e*e y realiza algo sobre la expresi√≥n misma, en particular @code_type muestra como se reescribe la expresi√≥n para ser ejecutada. Note como se har√° una llamada a la funci√≥n Base.mul_float que recibe dos argumentos y que regresar√° un valor Float64. Esta informaci√≥n es necesaria para que Julia pueda generar un c√≥digo veloz, el flujo de compilaci√≥n llevar√≠a esta informaci√≥n a generar un c√≥digo intermedio de Low Level Virtual Machine (LLVM), que es el compilador empotrado en Julia, el cual estar√≠a generando el siguiente c√≥digo LLVM (usando la macro @code_llvm):\n\n\n\n;  @ float.jl:411 within `*`\ndefine double @\"julia_*_2367\"(double %0, double %1) #0 {\ntop:\n  %2 = fmul double %0, %1\n  ret double %2\n}\n\n\n\n\nEste c√≥digo ya no es espec√≠fico para Julia, sino para la maquinar√≠a LLVM. Observe la especificidad de los tipos y lo corto del c√≥digo. El flujo de compilaci√≥n requerir√≠a generar el c√≥digo nativo, que puede ser observado a continuaci√≥n mediante la macro @code_native:\n\n\n\n   .text\n    .file   \"*\"\n    .globl  \"julia_*_2406\"                  # -- Begin function julia_*_2406\n    .p2align    4, 0x90\n    .type   \"julia_*_2406\",@function\n\"julia_*_2406\":                         # @\"julia_*_2406\"\n; ‚îå @ float.jl:411 within `*`\n# %bb.0:                                # %top\n    push rbp\n    mov  rbp, rsp\n    vmulsd   xmm0, xmm0, xmm1\n    pop  rbp\n    ret\n.Lfunc_end0:\n    .size   \"julia_*_2406\", .Lfunc_end0-\"julia_*_2406\"\n; ‚îî\n                                        # -- End function\n    .section    \".note.GNU-stack\",\"\",@progbits\n\n\n\n\nEn este caso podemos observar c√≥digo espec√≠fico para la computadora que esta generando este documento, es posible ver el manejo de registros y el uso de instrucciones del CPU en cuesti√≥n.\nEste c√≥digo puede ser eficiente dado que los tipos y las operaciones son conocidos, en el caso que esto no puede ser, la eficiencia esta perdida. Datos no nativos o la imposibilidad de determinar un tipo causar√≠an que se generar√° m√°s c√≥digo nativo que terminar√≠a necesitanto m√°s recursos del procesador. Una situaci√≥n similar ocurre cuando se aloja memoria de manera din√°mica. Siempre estaremos buscando que nuestro c√≥digo pueda determinar el tipo de datos para que el c√≥digo generado sea simple, si es posible usar datos nativos, adem√°s de no manejar o reducir el uso de memor√≠a din√°mica."
  },
  {
    "objectID": "01-basico.html#ejemplos-de-funciones",
    "href": "01-basico.html#ejemplos-de-funciones",
    "title": "",
    "section": "Ejemplos de funciones",
    "text": "Ejemplos de funciones\nLas funciones ser√°n una parte central de nuestros ejemplos, por lo que vale la pena retomarlas y dar ejemplos.\n\nfunction f(x)\n    x^2\nend\n\nf (generic function with 1 method)\n\n\nSiempre regresan el valor de la √∫ltima expresi√≥n; note como el tipo (y no solo el valor) de retorno depende del tipo de la entrada, e.g., si x es un entero entonces x^2 ser√° un entero, pero si x es una matriz, x^2 ser√° una matriz.\nHay valores opcionales y kwargs, ambas tienen caracter√≠sticas diferentes:\n\nfunction f(x, t=1)\n    (x+t)^2\nend\n\nfunction g(x; t=1)\n    (x+t)^2\nend\n\ng (generic function with 1 method)"
  },
  {
    "objectID": "01-basico.html#estructuras",
    "href": "01-basico.html#estructuras",
    "title": "",
    "section": "Estructuras",
    "text": "Estructuras\n\nstruct Point\n  x::Float32\n  y::Float32\nend\n\nLa idea suele ser que todo se use de manera armoniosa\n\n\"\"\"\n  Calcula la norma de un vector representado\n  como un tupla\n\"\"\"\nfunction norm(u::Tuple)\n  s = 0f0\n\n  for i in eachindex(u)\n    s += u[i]^2\n  end\n\n  sqrt(s)\nend\n\n\"\"\"\n  Calcula la norma de un vector de 2 dimensiones\n  representado como una estructura\n\"\"\"\nfunction norm(u::Point)\n  sqrt(u.x^2 + u.y^2)\nend\n\n(norm((1, 1, 1, 1)), norm(Point(1, 1)))\n\n(2.0f0, 1.4142135f0)"
  },
  {
    "objectID": "01-basico.html#arreglos",
    "href": "01-basico.html#arreglos",
    "title": "",
    "section": "Arreglos",
    "text": "Arreglos\nUna matriz aleatoria de \\(4 \\times 6\\) se define como sigue\n\nA = rand(Float32, 4, 6)\n\n4√ó6 Matrix{Float32}:\n 0.451006   0.600056  0.286427  0.754291  0.721982   0.475068\n 0.0616897  0.478756  0.90493   0.959566  0.0336471  0.671999\n 0.741192   0.872866  0.569014  0.125174  0.302817   0.303747\n 0.601318   0.897296  0.821511  0.986912  0.510021   0.25681\n\n\nUn vector aleatorio de 6 dimensiones ser√≠a como sigue:\n\nx = rand(Float32, 4)\n\n4-element Vector{Float32}:\n 0.8969931\n 0.6531278\n 0.03983432\n 0.13929999\n\n\nentonces podriamos multiplicar x con A como sigue:\n\ny = x' * A\n\n1√ó6 adjoint(::Vector{Float32}) with eltype Float32:\n 0.558129  1.0107  0.985061  1.44578  0.752697  0.912908\n\n\n\ny'\n\n6-element Vector{Float32}:\n 0.55812943\n 1.0106982\n 0.9850608\n 1.4457756\n 0.75269705\n 0.91290766\n\n\nTambi√©n existen otras formas para realizarla, aunque no suelen ser la mejor idea si se tienen alternativas can√≥nicas:\n\nusing LinearAlgebra\n\ndot.(Ref(x), eachcol(A))\n\nWARNING: using LinearAlgebra.norm in module Notebook conflicts with an existing identifier.\n\n\n6-element Vector{Float32}:\n 0.55812943\n 1.0106982\n 0.9850608\n 1.4457756\n 0.75269705\n 0.91290766\n\n\nEste ejemplo muestra la t√©cnica broadcasting que aplica una funci√≥n a una colecci√≥n; se indica a√±adiendo un punto al final del nombre de la funci√≥n. Adicionalmente, hay una serie de reglas que se deben seguir para el manejo de las colecciones. La funci√≥n eachcol crea un iterador sobre cada columna de la matriz A y Ref(x), nos permite que el broadcasting reconozca al vector x como un √∫nico elemento en lugar de una colecci√≥n de valores."
  },
  {
    "objectID": "01-basico.html#paquetes-y-m√≥dulos",
    "href": "01-basico.html#paquetes-y-m√≥dulos",
    "title": "",
    "section": "Paquetes y m√≥dulos",
    "text": "Paquetes y m√≥dulos\nEl ecosistema de paquetes de Julia es una de sus mayores fortalezas, impulsado por usu gestor de paquetes Pkg, el cual viene integrado en el REPL y en la su instalaci√≥n m√≠nima; es muy robusto. Se encarga de la instalaci√≥n y actualizaci√≥n de librer√≠as, as√≠ como tambi√©n garantiza la reproducibilidad de los proyectos. Cada ambiente de trabajo en Julia utiliza archivos como Project.toml y Manifest.toml para registrar la paqueter√≠a usada, as√≠ como las versiones necesarias de todas las dependencias.\n\nPkg en REPL\nPara entrar al modo Pkg desde cualquier sesi√≥n de Julia en el REPL se debe teclear _corchete cerrado ].\nEl prompt del REPL cambiar√°:\n\n\n\nModo\nPrompt\n\n\n\n\nNormal (Julia)\njulia&gt;\n\n\nModo Pkg\n(@v1.10) pkg&gt;\n\n\n\nAhora se puede ver qu√© paquetes est√°n instalados en tu entorno actual.\n\n\n\n\n\n\n\nComando\nAcci√≥n\n\n\n\n\nst o status\nMuestra la lista de todos los paquetes instalados y sus versiones espec√≠ficas.\n\n\n\nPara a√±adir una paquete a tu entorno, usa el comando add.\n\n\n\nComando\nAcci√≥n\n\n\n\n\nadd Paquete\nDescarga e instala el paquete.\n\n\n\nEn el caso de que un paquete ya no sea necesario, se puede desinstalar con el comando rm (de remove).\n\n\n\nComando\nAcci√≥n\n\n\n\n\nrm Paquete\nElimina el paquete del entorno actual.\n\n\n\nFinalmente, es posible actualizar paquetes de manera individual o colectiva usando el comando up.\n\n\n\n\n\n\n\nComando\nAcci√≥n\n\n\n\n\nup o update\nActualiza todos los paquetes instalados a su √∫ltima versi√≥n compatible.\n\n\nup Paquete o update Paquete\nActualiza Paquete a su √∫ltima versi√≥n compatible.\n\n\n\n\nManejo de ambientes\nEl entorno o ambiente (environment) se puede especificar de manera global o por diretorio, y nos sirve para aislar las aplicaciones y no entrar en dificultades por versiones.\n\n\n\nComando\nAcci√≥n\n\n\n\n\nactivate dir\nActiva el directorio dir como ambiente.\n\n\n\nSupongamos que nos comparten un proyecto escrito en julia, lo primero que debemos hacer es activar e instanciar el ambiente; la instanciaci√≥n es como sigue\n\n\n\n\n\n\n\nComando\nAcci√≥n\n\n\n\n\ninstantiate\nSe instalan todos los paquetes indicados por el ambiente.\n\n\n\nMuchas veces tambi√©n cambiamos paquetes locales que requiren reactualizar el ambiente, eso se consigue con ] resolve que actualizar√° las nuevas dependencias que cambiaron.\n\n\nSaliendo del modo Pkg\nPara volver al modo de ejecuci√≥n de c√≥digo normal de Julia, se debe presionar backspace.\nEl prompt cambiar√° de nuevo a julia&gt; y podr√°s usar los paquetes que instalaste con el comando using.\nusing DataFrames, CSV\nesto traera el paquete al entorno en memoria haciendo accesibles sus m√©todos y estructuras p√∫blicas.\n\n\n\nUsando Pkg desde el modo normal de Julia (fuera del modo Pkg del REPL)\nExiste un paquete interno de las instalaciones de julia llamado Pkg que es el que maneja todo lo anterior, este puede ser utilizado como cualquier paquete. Basicamente tiene funciones similares a las del modo Pkg (con nombres completos).\nEjemplos:\njulia&gt; import Pkg\njulia&gt; Pkg.add(\"PlotlyLight\") \njulia&gt; Pkg.add([\"CSV\", \"DataFrames\"]) \njulia&gt; Pkg.rm(\"PlotlyLight\")\njulia&gt; Pkg.update()\njulia&gt; Pkg.status() \nAhora para el manejo de los ambientes:\njulia&gt; import Pkg\njulia&gt; Pkg.activate(\".\")\njulia&gt; Pkg.instantiate()\njulia&gt; Pkg.add(\"Statistics\")"
  },
  {
    "objectID": "01-basico.html#otras-estrategias-para-la-organizaci√≥n-de-c√≥digo",
    "href": "01-basico.html#otras-estrategias-para-la-organizaci√≥n-de-c√≥digo",
    "title": "",
    "section": "Otras estrategias para la organizaci√≥n de c√≥digo",
    "text": "Otras estrategias para la organizaci√≥n de c√≥digo\nLa funci√≥n include(\"nombre_archivo.jl\") es el m√©todo m√°s simple en Julia para organizar c√≥digo en m√∫ltiples archivos. Su funci√≥n es equivalente a copiar y pegar el contenido del archivo especificado directamente en la l√≠nea donde se llama a include.\nSirve para estructurar grandes scripts en archivos m√°s peque√±os y manejables; el c√≥digo incluido se ejecuta en el mismo alcance (scope) donde se llam√≥ a include. Si llamas a include en el alcance global, las funciones y variables definidas en el archivo incluido se vuelven globales. Si lo llamas dentro de un m√≥dulo, se vuelven parte de ese m√≥dulo.\nEs simple, pero no proporciona aislamiento, y puede generar conflictos de nombres si no se usa de manera adecuada.\nPor otro lado, los m√≥dulos permmiten crear espacios de nombres (namespaces) aislados y bien definidos, utiles para organizar proyectos grandes y complejos.\n\nAislamiento y alcance (Scoping)\nUn m√≥dulo act√∫a como una caja que encierra sus funciones y variables. Todo lo que se define dentro de un m√≥dulo es privado por defecto para evitar conflictos de nombres con c√≥digo externo.\nmodule MiCalculadora\n    # Esta funci√≥n es PRIVADA\n    function interna(x)\n        return x * 2\n    end\n\n    # Esta funci√≥n se hace P√öBLICA con 'export'\n    export sumar\n\n    function sumar(a, b)\n        return a + b\n    end\nend\nPara que las funciones, tipos o constantes dentro de un m√≥dulo sean accesibles desde afuera, deben ser expl√≠citamente exportadas utilizando la palabra clave export.\nLos modulos pueden anidarse.\nPara utilizar las funciones de un m√≥dulo en otro script o en el REPL, se usan dos comandos principales:\n\n\n\n\n\n\n\nComando\nAcci√≥n\n\n\n\n\nusing NombreModulo\nImporta solo los s√≠mbolos que han sido exportados por el m√≥dulo.\n\n\nimport NombreModulo\nImporta el m√≥dulo completo. Para usar sus funciones, debes prefijarlas (ej: NombreModulo.sumar(1, 2)).\n\n\n\nEn la pr√°ctica, un paquete o un proyecto grande de Julia casi siempre usa tanto include como m√≥dulos. De esta manera, include ayuda a la organizaci√≥n de archivos, mientras que el bloque module garantiza que todo el c√≥digo est√© contenido en un espacio de nombres √∫nico y limpio, evitando colisiones.\nEn particular, los paquetes pueden verse como la preparaci√≥n de un m√≥dulo para su distribuci√≥n, indicando los paquetes que usan (dependencias) y sus versiones especificas para los cuales fueron dise√±ados. Tambi√©n suelen incluir documentaci√≥n y pruebas unitarias."
  },
  {
    "objectID": "01-basico.html#recursos-para-aprender-m√°s-sobre-el-lenguaje",
    "href": "01-basico.html#recursos-para-aprender-m√°s-sobre-el-lenguaje",
    "title": "",
    "section": "Recursos para aprender m√°s sobre el lenguaje",
    "text": "Recursos para aprender m√°s sobre el lenguaje\n\nInformaci√≥n sobre como instalar Julia y flujos de trabajo simples (e.g., REPL, editores, etc.) para trabajar con este lenguaje de programaci√≥n: Modern Julia Workflows https://modernjuliaworkflows.github.io/.\nLibro sobre julia Think Julia: How to Think Like a Computer Scientist https://benlauwens.github.io/ThinkJulia.jl/latest/book.html.\nCurso Introduction to computational thinking https://computationalthinking.mit.edu/Fall20/"
  },
  {
    "objectID": "01-basico.html#licencia",
    "href": "01-basico.html#licencia",
    "title": "",
    "section": "Licencia",
    "text": "Licencia\n\nEsta obra est√° bajo una Licencia Creative Commons Atribuci√≥n-CompartirIgual 4.0 Internacional"
  },
  {
    "objectID": "refs.html",
    "href": "refs.html",
    "title": "",
    "section": "",
    "text": "C√≥digo\n\n\n\n\n\nReferences"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "C√≥digo"
  },
  {
    "objectID": "index.html#trabajo-en-progreso",
    "href": "index.html#trabajo-en-progreso",
    "title": "",
    "section": "Trabajo en progreso",
    "text": "Trabajo en progreso\nEste curso es un trabajo en progreso. Se ha presentado en version extendida como parte de la materia Recuperaci√≥n de Informaci√≥n en Bases de Datos No Estructuradas de la maestr√≠a en Ciencia de Datos e Informaci√≥n de INFOTEC; en esta forma, se pretende dar una introducci√≥n m√°s amena a las aplicaciones."
  },
  {
    "objectID": "index.html#licencia",
    "href": "index.html#licencia",
    "title": "",
    "section": "Licencia",
    "text": "Licencia\n\nEsta obra est√° bajo una Licencia Creative Commons Atribuci√≥n-CompartirIgual 4.0 Internacional"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "",
    "section": "Notas",
    "text": "Notas\n\n\nPara este curso se recomienda utilizar la versi√≥n 1.10 o superior, y puede obtenerse en https://julialang.org/.‚Ü©Ô∏é"
  },
  {
    "objectID": "02-data-vis.html",
    "href": "02-data-vis.html",
    "title": "",
    "section": "",
    "text": "C√≥digo"
  },
  {
    "objectID": "02-data-vis.html#uso-de-tablas-de-datos",
    "href": "02-data-vis.html#uso-de-tablas-de-datos",
    "title": "",
    "section": "Uso de tablas de datos",
    "text": "Uso de tablas de datos\nUn dataframe es una tabla de datos y visualizaci√≥n con Plotly\n\nusing CSV, DataFrames, Downloads, StatsBase, MultivariateStats\nusing PlotlyLight\nPlotlyLight.settings.use_iframe = true\n#preset.source.standalone!()\n\ntrue\n\n\nDescargaremos una tabla de internet en formato CSV y luego se cargar√°\n\nurl = \"https://raw.githubusercontent.com/plotly/datasets/master/iris.csv\"\n\nDownloads.download(url, \"iris.csv\")\ndf = CSV.read(\"iris.csv\", DataFrame)\n\n150√ó5 DataFrame125 rows omitted\n\n\n\nRow\nSepalLength\nSepalWidth\nPetalLength\nPetalWidth\nName\n\n\n\nFloat64\nFloat64\nFloat64\nFloat64\nString15\n\n\n\n\n1\n5.1\n3.5\n1.4\n0.2\nIris-setosa\n\n\n2\n4.9\n3.0\n1.4\n0.2\nIris-setosa\n\n\n3\n4.7\n3.2\n1.3\n0.2\nIris-setosa\n\n\n4\n4.6\n3.1\n1.5\n0.2\nIris-setosa\n\n\n5\n5.0\n3.6\n1.4\n0.2\nIris-setosa\n\n\n6\n5.4\n3.9\n1.7\n0.4\nIris-setosa\n\n\n7\n4.6\n3.4\n1.4\n0.3\nIris-setosa\n\n\n8\n5.0\n3.4\n1.5\n0.2\nIris-setosa\n\n\n9\n4.4\n2.9\n1.4\n0.2\nIris-setosa\n\n\n10\n4.9\n3.1\n1.5\n0.1\nIris-setosa\n\n\n11\n5.4\n3.7\n1.5\n0.2\nIris-setosa\n\n\n12\n4.8\n3.4\n1.6\n0.2\nIris-setosa\n\n\n13\n4.8\n3.0\n1.4\n0.1\nIris-setosa\n\n\n‚ãÆ\n‚ãÆ\n‚ãÆ\n‚ãÆ\n‚ãÆ\n‚ãÆ\n\n\n139\n6.0\n3.0\n4.8\n1.8\nIris-virginica\n\n\n140\n6.9\n3.1\n5.4\n2.1\nIris-virginica\n\n\n141\n6.7\n3.1\n5.6\n2.4\nIris-virginica\n\n\n142\n6.9\n3.1\n5.1\n2.3\nIris-virginica\n\n\n143\n5.8\n2.7\n5.1\n1.9\nIris-virginica\n\n\n144\n6.8\n3.2\n5.9\n2.3\nIris-virginica\n\n\n145\n6.7\n3.3\n5.7\n2.5\nIris-virginica\n\n\n146\n6.7\n3.0\n5.2\n2.3\nIris-virginica\n\n\n147\n6.3\n2.5\n5.0\n1.9\nIris-virginica\n\n\n148\n6.5\n3.0\n5.2\n2.0\nIris-virginica\n\n\n149\n6.2\n3.4\n5.4\n2.3\nIris-virginica\n\n\n150\n5.9\n3.0\n5.1\n1.8\nIris-virginica\n\n\n\n\n\n\nPara observar un resumen del contenido\n\ndescribe(df)\n\n5√ó7 DataFrame\n\n\n\nRow\nvariable\nmean\nmin\nmedian\nmax\nnmissing\neltype\n\n\n\nSymbol\nUnion‚Ä¶\nAny\nUnion‚Ä¶\nAny\nInt64\nDataType\n\n\n\n\n1\nSepalLength\n5.84333\n4.3\n5.8\n7.9\n0\nFloat64\n\n\n2\nSepalWidth\n3.054\n2.0\n3.0\n4.4\n0\nFloat64\n\n\n3\nPetalLength\n3.75867\n1.0\n4.35\n6.9\n0\nFloat64\n\n\n4\nPetalWidth\n1.19867\n0.1\n1.3\n2.5\n0\nFloat64\n\n\n5\nName\n\nIris-setosa\n\nIris-virginica\n0\nString15\n\n\n\n\n\n\nLos dataframes permiten filtrar o seleccionar datos de manera muy simple:\n\ndf_setosa = filter(r -&gt; r.Name == \"Iris-setosa\", df)\ndf_versicolor = df[df.Name .== \"Iris-versicolor\", :]\n\n50√ó5 DataFrame25 rows omitted\n\n\n\nRow\nSepalLength\nSepalWidth\nPetalLength\nPetalWidth\nName\n\n\n\nFloat64\nFloat64\nFloat64\nFloat64\nString15\n\n\n\n\n1\n7.0\n3.2\n4.7\n1.4\nIris-versicolor\n\n\n2\n6.4\n3.2\n4.5\n1.5\nIris-versicolor\n\n\n3\n6.9\n3.1\n4.9\n1.5\nIris-versicolor\n\n\n4\n5.5\n2.3\n4.0\n1.3\nIris-versicolor\n\n\n5\n6.5\n2.8\n4.6\n1.5\nIris-versicolor\n\n\n6\n5.7\n2.8\n4.5\n1.3\nIris-versicolor\n\n\n7\n6.3\n3.3\n4.7\n1.6\nIris-versicolor\n\n\n8\n4.9\n2.4\n3.3\n1.0\nIris-versicolor\n\n\n9\n6.6\n2.9\n4.6\n1.3\nIris-versicolor\n\n\n10\n5.2\n2.7\n3.9\n1.4\nIris-versicolor\n\n\n11\n5.0\n2.0\n3.5\n1.0\nIris-versicolor\n\n\n12\n5.9\n3.0\n4.2\n1.5\nIris-versicolor\n\n\n13\n6.0\n2.2\n4.0\n1.0\nIris-versicolor\n\n\n‚ãÆ\n‚ãÆ\n‚ãÆ\n‚ãÆ\n‚ãÆ\n‚ãÆ\n\n\n39\n5.6\n3.0\n4.1\n1.3\nIris-versicolor\n\n\n40\n5.5\n2.5\n4.0\n1.3\nIris-versicolor\n\n\n41\n5.5\n2.6\n4.4\n1.2\nIris-versicolor\n\n\n42\n6.1\n3.0\n4.6\n1.4\nIris-versicolor\n\n\n43\n5.8\n2.6\n4.0\n1.2\nIris-versicolor\n\n\n44\n5.0\n2.3\n3.3\n1.0\nIris-versicolor\n\n\n45\n5.6\n2.7\n4.2\n1.3\nIris-versicolor\n\n\n46\n5.7\n3.0\n4.2\n1.2\nIris-versicolor\n\n\n47\n5.7\n2.9\n4.2\n1.3\nIris-versicolor\n\n\n48\n6.2\n2.9\n4.3\n1.3\nIris-versicolor\n\n\n49\n5.1\n2.5\n3.0\n1.1\nIris-versicolor\n\n\n50\n5.7\n2.8\n4.1\n1.3\nIris-versicolor\n\n\n\n\n\n\n\np = plot(mode=\"markers\")\np = p.scatter(x=df_setosa.SepalLength, y=df_setosa.PetalLength, mode=\"markers\")\np = p.scatter(x=df_versicolor.SepalLength, y=df_versicolor.PetalLength, mode=\"markers\")\np.layout.title.text = \"2 tipos de flores\"\np\n\n\n\n\nEl plot anterior tiene un problema, solo muestra SepalLength vs PetalLength; ignorando SepalWidth y PealWidth. Es posible hacer un plot en 3 dimensiones, pero en 4 ya no es posible. Entonces, lo que se suele hacer para visualizar datos de alta dimensi√≥n es utilizar un m√©todo para reducir la dimensi√≥n. Por ejemplo PCA.\n\np = plot()\np.layout.title = \"PCA sobre Iris\"\n\nX = permutedims(Matrix{Float32}(df[:, [:SepalLength, :SepalWidth, :PetalLength, :PetalWidth]]))\n\ncolors = Dict(\n    \"Iris-setosa\" =&gt; \"blue\", \n    \"Iris-versicolor\" =&gt; \"red\", \n    \"Iris-virginica\" =&gt; \"orange\"\n    )\n\npca = fit(PCA, X; maxoutdim=2)\nX2 = predict(pca, X)\ndisplay(size(X2))\np = p.scatter(\n    x=X2[1, :],\n    y=X2[2, :],\n    mode=\"markers\",\n    marker=Dict(:color =&gt; map(name-&gt;colors[name], df.Name))\n    )\np\n\n\n\n\n\n\n(2, 150)\n\n\n(a) PCA\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\nFigura¬†1"
  }
]