---
engine: julia
lang: es-MX
title: Dataframes y Visualización

---

## Uso de tablas de datos
Un dataframe es una tabla de datos y visualización con Plotly; existen varios graficadores de Julia, incluso algunos nativos, pero suelen tener tiempos de compilación considerables que pueden ser poco prácticos para su uso en Colab o un curso práctico limitado en tiempo.

```{julia}
using CSV, DataFrames, Downloads, StatsBase, MultivariateStats
using PlotlyLight
PlotlyLight.settings.use_iframe = true  # necesario para quarto / jupyter / etc.
```

### Descargando un archivo de datos CSV desde Internet
Descargaremos una tabla de internet en formato CSV y luego se cargará
```{julia}
url = "https://raw.githubusercontent.com/plotly/datasets/master/iris.csv"

Downloads.download(url, "iris.csv")
df = CSV.read("iris.csv", DataFrame)
```

Para observar un resumen del contenido
```{julia}
describe(df)
```

### Filtrado
Los dataframes permiten filtrar o seleccionar datos de manera muy simple:
```{julia}
df_setosa = filter(r -> r.Name == "Iris-setosa", df)
df_versicolor = df[df.Name .== "Iris-versicolor", :]
```

## Visualización
Para visualiación 

```{julia}
p = plot(mode="markers")
p = p.scatter(x=df_setosa.SepalLength, y=df_setosa.PetalLength, mode="markers")
p = p.scatter(x=df_versicolor.SepalLength, y=df_versicolor.PetalLength, mode="markers")
p.layout.title.text = "2 tipos de flores"
p
```

#### Visualización de datos en alta dimensión
El plot anterior tiene un problema, solo muestra `SepalLength` vs `PetalLength`; ignorando `SepalWidth` y `PealWidth`. Es posible hacer un plot en 3 dimensiones, pero en 4 ya no es posible. Entonces, lo que se suele hacer para visualizar datos de alta dimensión es utilizar un método para reducir la dimensión. Por ejemplo `PCA`.


```{julia}
#| label: fig-pca
#| fig-cap: "PCA"

p = plot()
p.layout.title = "PCA sobre Iris"

X = permutedims(Matrix{Float32}(df[:, [:SepalLength, :SepalWidth, :PetalLength, :PetalWidth]]))

colors = Dict(
    "Iris-setosa" => "blue", 
    "Iris-versicolor" => "red", 
    "Iris-virginica" => "green"
    )

pca = fit(PCA, X; maxoutdim=2)
X2 = predict(pca, X)
display(size(X2))
p = p.scatter(
    x=X2[1, :],
    y=X2[2, :],
    mode="markers",
    marker=Dict(:color => map(name->colors[name], df.Name))
    )
p
```

Ahora tenemos un mapa en 2D que contiene información de 4D; lo cual claramente podría implicar un _error_, ver el artículo de [PCA](https://en.wikipedia.org/wiki/Principal_component_analysis) en wikipedia, pero nos permite generar conocimiento e intuición de las relaciones entre los datos.

### Ejercicios

Calcule las matriz de distancias entre todas las muestras (4D, 150 vectores). Grafique dicha matriz como si fuera una imagen; vea la página del manual de Plotly para [heatmap](https://plotly.com/javascript/reference/heatmap/).